
def job_offer_parser() -> dict:
    if "matching_stage" not in st.session_state:
        st.session_state["matching_stage"] = 0

    if st.session_state["matching_stage"] == 0:
        if "job_offer" in st.session_state:
            del st.session_state["job_offer"]
        if "get_all_cv_from_matching" in st.session_state:
            del st.session_state["get_all_cv_from_matching"]

        colonne1, colonne2, colonne3 = st.columns([0.05, 0.9, 0.05])
        with colonne2:
            st.markdown("#")
            st.markdown(
                """
                    <style>
                        body {
                            background-color: #EFEFEF;
                        }
                        .container {
                            max-width: 1000px;
                            margin: 25px auto;
                            padding: 20px;
                            background-color: #EFEFEF;
                            border-radius: 10px;
                            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                        }
                        .header {
                            text-align: center;
                            margin-bottom: 30px;
                        }
                        .explication {
                            background-color: #C1E1C1;
                            padding: 20px;
                            border-radius: 10px;
                            margin-bottom: 20px;
                        }
                        .expander {
                            background-color: #EFEFEF;
                            padding: 20px;
                            border-radius: 10px;
                        }
                        .pilier {
                            background-color: #e8f4ea;
                            padding: 20px;
                            border-radius: 10px;
                            margin-right: 10px;
                            font-size: 0.70vw;
                            flex: 1;
                            flex-basis: 0; /* Added to make items equally share the space */
                        }
                        .pilier-explication {
                            display: flex;
                            flex-wrap: wrap;
                        }
                    </style>
                    """,
                unsafe_allow_html=True,
            )

            st.markdown(
                """
                    <div class="container">
                        <div class="header">
                            <h1 style='text-align: center;font-size: 1.75vw;'> Votre prochaine candidature a 9 chances sur 10 d'etre d'abord vu par une IA </h1>
                            <p style='text-align: center;font-size: 0.7vw;'>NEST analyse ton CV dans les conditions réelles d'une embauche</p>
                        </div>
                        <div class="explication">
                            <h2 style='text-align: center;font-size: 0.7vw;'>Explication</h2>
                            <p style='text-align: center;font-size: 0.4vw;'>Nest s'assure de la lisibilité de votre CV</p>
                        </div>
                        <div class="expander">
                            <details>
                                <summary style='text-align: center;font-size: 0.75vw;'>En savoir plus sur les indispensables dans votre CV </summary>
                                <div class="pilier-explication">
                                    <div class="pilier">
                                        <h4>Information de contact</h4>
                                        <p>Les informations necessaire pour vous identifié : Votre nom , votre adresse mail,numéro de télephone,adresse..</p>
                                    </div>
                                    <div class="pilier">
                                        <h4>Niveau d'étude et langue</h4>
                                        <p>l'intitulé de votre diplome rediger de manière claire et énoncé votre niveau de langue</p>
                                    </div>
                                    <div class="pilier">
                                        <h4>Votre stack technique</h4>
                                        <p>les langages et les outils que vous maitrisées </p>
                                    </div>
                                    <div class="pilier">
                                        <h4>Vos softs skills</h4>
                                        <p>Decrivez ce qui fait de vous le candidat idéal humainement parlant</p>
                                    </div>
                                    <div class="pilier">
                                        <h4>Vos taches</h4>
                                        <p>Qu'est ce que vous etes capables de faire </p>
                                    </div>
                                    <div class="pilier">
                                        <h4>Votre niveau d'experience</h4>
                                        <p>Au travers vos missions decrivez votre niveau de seniorité</p>
                                    </div>
                                </div>
                            </details>
                        </div>
                    </div>
                    """,
                unsafe_allow_html=True,
            )

            whitespace = 9

            st.markdown("#")

            col1, col2, col3 = st.columns([0.2, 0.6, 0.2])

            with col2:
                st.write("charge votre CV au format ")
                with st.container(border=True):
                    uploaded_file = st.file_uploader(
                        " ",
                        type="pdf",
                        accept_multiple_files=False,
                    )

                    st.session_state["temp_uploaded_file"] = uploaded_file
                    button_upload = st.button(
                        "Chargez PDF",
                        type="primary",
                        disabled=not bool(uploaded_file),
                        on_click=set_matching_state,
                        args=(1, "upload"),
                    )

    if st.session_state.get("matching_type") == "upload":
        with st.spinner("L'oiseau fait son nid **upload**"):
            st.session_state["job_offer"] = cache_resume(
                st.session_state["temp_uploaded_file"]
            )
        # st.write(st.session_state["job_offer"])

        candidat = st.session_state["job_offer"]

        st.markdown("#")
        st.markdown("#")

        if st.session_state.get("matching_stage") == 1:
            if "matching_type" in st.session_state:
                del st.session_state["matching_type"]
            back_offer_button = st.button(
                "Précedent",
                type="primary",
                on_click=set_matching_state,
                args=(0, None),
            )

        name_and_score, rest = st.columns([0.4, 0.6], gap="large")

        with name_and_score:

            def calculer_scores(data):
                # Liste des piliers
                piliers = [
                    "Information de contact",
                    "Niveau d'étude et langue",
                    "Votre stack technique",
                    "Vos softs skills",
                    "Vos taches",
                    "Votre niveau d'experience",
                ]

                # Liste des sous-piliers et leur poids (pourcentage)
                sous_piliers = {
                    "Information de contact": [
                        "nom_prenom",
                        "adresse",
                        "numero",
                        "mail",
                    ],
                    "Niveau d'étude et langue": ["diplome", "langue"],
                    "Votre stack technique": ["hard_skills"],
                    "Vos softs skills": ["soft_skills"],
                    "Vos taches": ["tache"],
                    "Votre niveau d'experience": ["time_in_field"],
                }

                # Initialiser le score total
                score_total = 0

                # Dictionnaire pour stocker les scores par pilier
                scores_par_pilier = {}

                # Calculer les scores pour chaque sous-pilier
                for pilier, sous_pilier_list in sous_piliers.items():
                    score_pilier = 0
                    for sous_pilier in sous_pilier_list:
                        if data.get(sous_pilier):
                            score_pilier += 100 / len(
                                sous_pilier_list
                            )  # Répartir le score équitablement entre les sous-piliers
                    # st.write(f"Score pour {pilier}: {score_pilier}%")
                    scores_par_pilier[pilier] = score_pilier
                    score_total += score_pilier

                # Calculer le taux de lisibilité
                taux_lisibilite = score_total / len(piliers)
                scores_par_pilier["Score Global"] = taux_lisibilite
                # st.write(f"Taux de lisibilité: {taux_lisibilite}%")

                # Retourner le dictionnaire des scores par pilier
                return scores_par_pilier

            scores = calculer_scores(candidat)
            html_str = f"""
                    <h6 style='text-align: center; color:rgb(44,63,102);font-size: 1.7vw;'>READABILITY®</h6></br>
                    <h1 style='text-align: center;font-size: 0.8vw;'>Capacité de votre CV à etre lu </h1>
                            """
            st.markdown(html_str, unsafe_allow_html=True)

            st.markdown(
                generate_gauge(scores["Score Global"]),
                unsafe_allow_html=True,
            )

            st.markdown("#")

            # Identifier les piliers incomplets
            seuil_incomplet = 100

            piliers_incomplets = [
                pilier
                for pilier, score in scores.items()
                if pilier != "Score Global" and score < seuil_incomplet
            ]

            col1, col2, col3 = st.columns([0.2, 0.6, 0.2])

            # Générer une chaîne HTML pour les piliers incomplets

            with col2:
                if piliers_incomplets:
                    incomplet_message = "<div style='border: 2px solid black; border-radius: 10px; padding: 10px;background-color:#ADD8E6'>"
                    incomplet_message += "<h6 style='color:rgba(255,0,0,1); font-size: 0.8vw;'>Les piliers suivants ne sont pas complets :</h6>"
                    incomplet_message += "<ul>"
                    for pilier in piliers_incomplets:
                        incomplet_message += (
                            f"<li style='font-size: 0.7vw;'><bold>{pilier} </bold></li>"
                        )
                    incomplet_message += "</ul>"
                    incomplet_message += "</div>"

                    st.markdown(incomplet_message, unsafe_allow_html=True)

                st.markdown("#")
            # st.write(candidat)

            col1, col2, col3 = st.columns([0.1, 0.8, 0.1])
            with col2:
                with st.container(border=True):
                    if candidat["nom_prenom"][0] is None:
                        name = "le candidat"
                    else:
                        name = candidat["nom_prenom"][0]

                    html_str = f"""
                                <p style='text-align: center;font-size: 1.2vw;' ><strong>{name}</strong></p></b>
                                        """

                    st.markdown(html_str, unsafe_allow_html=True)

                    ########
                    job = clarifier_nom(candidat["job_type"])

                    html_str = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>EXPERTISE:</h5> <b> <p style='text-align: center;font-size: 0.8vw;' ><strong>{job}</strong></p></b>
                                        """

                    st.markdown(html_str, unsafe_allow_html=True)
                    if candidat["location"][0]:
                        lieu = candidat["location"][0].capitalize()
                        html_str = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>LIEU:</h5> <b> <p style='text-align: center;font-size: 0.8vw;' ><strong>{lieu}</strong></p></b>
                                        """

                        st.markdown(html_str, unsafe_allow_html=True)
                    else:
                        lieu = "N.D"

                        #################  SOFT SKILLS

                    base_SKILLS = candidat["soft_skills"]
                    hard_skills_list_display = []

                    if base_SKILLS is None:
                        base_SKILLS = []

                    if len(base_SKILLS) > 0:
                        for hard_skill in base_SKILLS:
                            hard_skills_list_display.append(
                                (hard_skill.capitalize(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> SOFT SKILLS </h5> <br>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(
                            hard_skills_list_display,
                            "",
                        )

                    else:
                        hard_skills_display = "Pas de soft skills "
                        html_diplome = f"""
                                    <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>  SOFT SKILLS </h5> <b> <p style='text-align: center;'>{hard_skills_display} </p></b>
                                        """

                        st.markdown(html_diplome, unsafe_allow_html=True)

                        ######################  DIPLOME

                    base_SKILLS = candidat["diplome"]
                    hard_skills_list_display = []
                    if base_SKILLS is None:
                        base_SKILLS = []

                    if len(base_SKILLS) > 0:
                        for hard_skill in base_SKILLS:
                            hard_skills_list_display.append(
                                (hard_skill.capitalize(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> FORMATION </h5> <b> <p style='text-align: center;'></p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(hard_skills_list_display)

                    else:
                        hard_skills_display = "Pas de formations reconnues "
                        html_diplome = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> FORMATION </h5> <b> <p style='text-align: center;'>{hard_skills_display} </p></b>
                                        """

                        st.markdown(html_diplome, unsafe_allow_html=True)

                        ##################### NIVEAU DE LANGUE

                    base_langue = candidat["langue"]
                    langue_list_display = []

                    if base_langue is None:
                        base_langue = []
                    if len(base_langue) > 0:
                        for langue in base_langue:
                            langue_list_display.append(
                                (langue.capitalize(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>LANGUE</h5> <b> <p style='text-align: center;'></p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(langue_list_display)

                    else:
                        langue_display = "Aucun niveau de langue signifié"
                        html_diplome = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>LANGUE</h5> <b> <p style='text-align: center;'>{langue_display} </p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)

                        #################  STACK TECHNIQUE

                    base_SKILLS = candidat["hard_skills"]
                    hard_skills_list_display = []

                    if base_SKILLS is None:
                        base_SKILLS = []

                    if len(base_SKILLS) > 0:
                        for hard_skill in base_SKILLS:
                            hard_skills_list_display.append(
                                (hard_skill.upper(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>STACK</h5> <b> <p style='text-align: center;'></p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(hard_skills_list_display)

                    else:
                        hard_skills_display = "Pas de competences techniques "
                        html_diplome = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'>STACK</h5> <b> <p style='text-align: center;'>{hard_skills_display} </p></b>
                                        """

                        st.markdown(html_diplome, unsafe_allow_html=True)

                        ################# projet

                    base_SKILLS = candidat["projet"]
                    hard_skills_list_display = []

                    if base_SKILLS is None:
                        base_SKILLS = []

                    if len(base_SKILLS) > 0:
                        for hard_skill in base_SKILLS:
                            hard_skills_list_display.append(
                                (hard_skill.capitalize(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> METHODO GESTION</h5> <b> <p style='text-align: center;'></p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(hard_skills_list_display)
                    else:
                        hard_skills_display = "Pas de missions "
                        html_diplome = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> METHODO GESTION </h5> <b> <p style='text-align: center;'>{hard_skills_display} </p></b>
                                        """

                        st.markdown(html_diplome, unsafe_allow_html=True)

                        ################# LISTE DE TACHE

                    base_SKILLS = candidat["tache"]
                    hard_skills_list_display = []

                    if base_SKILLS is None:
                        base_SKILLS = []

                    if len(base_SKILLS) > 0:
                        for hard_skill in base_SKILLS:
                            hard_skills_list_display.append(
                                (hard_skill.capitalize(), "", "#ccd9df")
                            )
                        html_diplome = f"""
                                        <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> MISSIONS</h5> <b> <p style='text-align: center;'></p></b>
                                        """
                        st.markdown(html_diplome, unsafe_allow_html=True)
                        annotated_text(hard_skills_list_display)
                    else:
                        hard_skills_display = "Pas de missions "
                        html_diplome = f"""
                                <h5 style='text-align: center; color:rgb(75,98,133);font-size: 1.2vw;'> MISSIONS </h5> <b> <p style='text-align: center;'>{hard_skills_display} </p></b>
                                        """

                        st.markdown(html_diplome, unsafe_allow_html=True)

            # Nous recherchons  les offres "analyst"
            from collections import Counter

            def top_3_ou_premiers_elements(elements):
                # Filtrer les éléments uniques tout en préservant l'ordre
                uniques = []
                for element in elements:
                    if element not in uniques:
                        uniques.append(element)

                # Retourner les 3 premiers éléments uniques si leur nombre est suffisant
                if len(uniques) >= 3:
                    return "+".join(uniques[:3])
                else:
                    # Retourner ce qui est disponible si moins de 3 éléments uniques
                    return "+".join(uniques)

            @st.cache_data(ttl=3600, show_spinner=False)
            def rechercher_offres_emploi(mots_cles):
                from offres_emploi.utils import dt_to_str_iso
                from datetime import datetime, timedelta
                from offres_emploi import Api

                client = Api(
                    client_id="PAR_bottwiiter_6253422b7e25285a1895dc28fcf76733f93ca17cad6a9e0aca8c9de42a8364c0",
                    client_secret="b8f09d357980a24a9b4869081a8d28471a868fae7aa148364ecbf7d9c539a78a",
                )

                # Calculer la date de début (aujourd'hui moins 7 jours) et la date de fin (aujourd'hui)
                start_dt = datetime.now() - timedelta(days=7)
                end_dt = datetime.now()

                # Paramètres de recherche
                params = {
                    "motsCles": mots_cles,
                    "minCreationDate": dt_to_str_iso(start_dt),
                    "maxCreationDate": dt_to_str_iso(end_dt),
                }

                # Effectuer la recherche
                resultats_recherche = client.search(params=params)

                return resultats_recherche

            with rest:
                if "page_actuelle" not in st.session_state:
                    st.session_state.page_actuelle = 1
                listed = top_3_ou_premiers_elements(candidat["post"])
                if listed is None:
                    st.write("Aucune donnée trouvée pour les critères donnés.")
                else:
                    offres_emploi = rechercher_offres_emploi(candidat["job_type"])[
                        "resultats"
                    ]
                    if not offres_emploi or offres_emploi == None:
                        st.write("Aucune offre d'emploi trouvée.")
                    else:
                        offres_par_page = 20
                        nombre_pages = len(offres_emploi) // offres_par_page + (
                            len(offres_emploi) % offres_par_page > 0
                        )

                        # Fonction pour changer de page
                        def changer_page(direction):
                            if (
                                direction == "suivante"
                                and st.session_state.page_actuelle < nombre_pages
                            ):
                                st.session_state.page_actuelle += 1
                            elif (
                                direction == "precedente"
                                and st.session_state.page_actuelle > 1
                            ):
                                st.session_state.page_actuelle -= 1

                        # Affichage des boutons de navigation
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.session_state.page_actuelle > 1:
                                st.button(
                                    "Page précédente",
                                    on_click=lambda: changer_page("precedente"),
                                )
                        with col2:
                            if st.session_state.page_actuelle < nombre_pages:
                                st.button(
                                    "Page suivante",
                                    on_click=lambda: changer_page("suivante"),
                                )
                        if "offres_selectionnees" not in st.session_state:
                            st.session_state.offres_selectionnees = []

                        debut = (st.session_state.page_actuelle - 1) * offres_par_page
                        fin = debut + offres_par_page
                        offres_page = offres_emploi[debut:fin]

                        # Créer une colonne pour les checkboxes et une autre pour les expanders
                        col_checkbox, col_expander = st.columns([1, 3], gap="small")

                        with col_checkbox:
                            # Créer une checkbox pour chaque offre dans la colonne dédiée
                            for index, offre in enumerate(offres_page, start=debut):
                                key = f"offre_{index}"
                                # Utiliser l'intitulé de l'offre comme label si besoin, ou un texte générique + index
                                selection = st.checkbox(f"Interessez ? cochez", key=key)

                                # Mise à jour de la liste des offres sélectionnées
                                if selection:
                                    if (
                                        offre
                                        not in st.session_state.offres_selectionnees
                                    ):
                                        st.session_state.offres_selectionnees.append(
                                            offre
                                        )
                                else:
                                    if offre in st.session_state.offres_selectionnees:
                                        st.session_state.offres_selectionnees.remove(
                                            offre
                                        )

                        with col_expander:
                            for offre in offres_page:
                                with st.expander(
                                    f"{offre['intitule']} chez {offre['entreprise'].get('nom', 'Non spécifié')}"
                                ):
                                    st.write(
                                        f"**Lieu de travail:** {offre['lieuTravail']['libelle']}"
                                    )
                                    st.write(
                                        f"**Type de contrat:** {offre['typeContratLibelle']}"
                                    )
                                    if "libelle" in offre["salaire"]:
                                        st.write(
                                            f"**Salaire:** {offre['salaire']['libelle']}"
                                        )
                                    else:
                                        st.write("**Salaire:** Non spécifié")
                                    st.write(
                                        f"**Description:**\n{offre['description']}"
                                    )

                        # Bouton pour procéder au matching avec les offres sélectionnées
                        if st.button(
                            "Procéder au Matching avec les offres sélectionnées"
                        ):
                            # Logique de matching ici
                            st.write(
                                "Matching en cours avec les offres sélectionnées..."
                            )
                            # Afficher, par exemple, les offres sélectionnées pour le matching
                            for offre in st.session_state.offres_selectionnees:
                                st.write(offre["intitule"])

                        # Affichage du nombre d'offres sélectionnées pour vérification
                        st.write(
                            f"Nombre d'offres sélectionnées: {len(st.session_state.offres_selectionnees)}"
                        )
